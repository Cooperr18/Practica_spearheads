sum(vector_cantidad_artefactos)
vector_edades_descubrimiento = c(1:100)
media_descubrimientos = mean(vector_edades_descubrimiento)
vector_edades_descubrimiento = c(1:100)
vector_edades_descubrimiento = sample(c(1:100))
media_descubrimientos = mean(vector_edades_descubrimiento)
mean(vector_edades_descubrimiento)
mean(vector_edades_descubrimiento)
vector_edades_descubrimiento = c(1984, 1985, 1987, 1990, 1991, 1992, 1995, 1997)
mean(vector_edades_descubrimiento)
vector_profundidad_hallazgos = c(2,3,7,5,9,11,1,4)
max(vector_profundidad_hallazgos)
yacimientos = sample(c("yac1","yac2","yac3","yac4","yac5"))
#practicaEstDescriptivaR
#1
set.seed(200)
num_cuentas = round(rnorm(100,mean = 50, sd = 10))
#10
yacimientos = sample(c("yac1","yac2","yac3","yac4","yac5"))
hist(x = yacimientos, y = num_cuentas)
hist(xlab = yacimientos, ylab = num_cuentas)
numero_cuentas = num_cuentas
yacimientos = sample(c("yac1","yac2","yac3","yac4","yac5"))
yacimientos = c("yac1","yac2","yac3","yac4","yac5")
cuentas_yacimientos = data.frame(
numero_cuentas = numero_cuentas,
yacimientos = yacimientos
)
cuentas_yacimientos
#10
hist(x = cuentas_yacimientos$yacimientos)
#10
hist(x = cuentas_yacimientos$yacimientos, main = "Frecuencia de cuentas por yacimiento",
xlab = "Yacimientos", ylab = "Frecuencia")
#10
hist(5 = cuentas_yacimientos$yacimientos, main = "Frecuencia de cuentas por yacimiento",
#10
hist(5 cuentas_yacimientos$yacimientos, main = "Frecuencia de cuentas por yacimiento",
#10
hist(cuentas_yacimientos$yacimientos, main = "Frecuencia de cuentas por yacimiento",
xlab = "Yacimientos", ylab = "Frecuencia")
hist(cuentas_yacimientos$yacimientos, main = "Frecuencia de cuentas por yacimiento",
xlab = "Yacimientos", ylab = "Frecuencia")
#10
hist(num_cuentas)
#10
hist(100 = num_cuentas)
#10
hist(100 =num_cuentas)
#10
hist(100=num_cuentas)
#10
hist(100 -> num_cuentas)
#10
hist(num_cuentas)
#10
hist(num_cuentas)
#11
plot(num_cuentas)
num_cuentas = round(rnorm(100,mean = 50, sd = 10))
#10
hist(num_cuentas)
#10
hist(num_cuentas, main = "Frecuencia de cuentas por yacimiento",
xlab = "Número de cuentas", ylab = "Yacimientos")
#11
plot(num_cuentas, main = "Frecuencia de cuentas por yacimiento",
xlab = "Número de cuentas", ylab = "Yacimientos")
#11
boxplot(num_cuentas, main = "Frecuencia de cuentas por yacimiento",
xlab = "Número de cuentas", ylab = "Yacimientos")
#10
hist(num_cuentas, main = "Frecuencia de cuentas por yacimiento",
xlab = "Número de cuentas", ylab = "Frecuencia")
#11
boxplot(num_cuentas, main = "Frecuencia de cuentas por yacimiento",
xlab = "Número de cuentas", ylab = "Frecuencia")
#10
hist(num_cuentas, main = "Frecuencia de cuentas por yacimiento",
xlab = "Número de cuentas", ylab = "Frecuencia",
col = green)
#10
hist(num_cuentas, main = "Frecuencia de cuentas por yacimiento",
xlab = "Número de cuentas", ylab = "Frecuencia",
col = khaki1)
#10
hist(num_cuentas, main = "Frecuencia de cuentas por yacimiento",
xlab = "Número de cuentas", ylab = "Frecuencia",
col = khaki 1)
#10
hist(num_cuentas, main = "Frecuencia de cuentas por yacimiento",
xlab = "Número de cuentas", ylab = "Frecuencia",
col = khaki1)
#10
hist(num_cuentas, main = "Frecuencia de cuentas por yacimiento",
xlab = "Número de cuentas", ylab = "Frecuencia",
col = "khaki1")
#12
plot(num_cuentas)
cuentas_en_yacimientos = data.frame(
cuentas = num_cuentas,
yacimientos = c("yac1","yac2","yac3","yac4")
)
#11
boxplot(x = cuentas_en_yacimientos$cuentas, y = cuentas_en_yacimientos$yacimientos, main = "Frecuencia de cuentas por yacimiento",
xlab = "Número de cuentas", ylab = "Frecuencia")
cuentas_en_yacimientos
n_registros = 4
#11
boxplot(x = cuentas_en_yacimientos$cuentas, y = cuentas_en_yacimientos$yacimientos, main = "Frecuencia de cuentas por yacimiento",
xlab = "Número de cuentas", ylab = "Frecuencia")
#11
boxplot(num_cuentas, main = "Frecuencia de cuentas por yacimiento",
xlab = "Número de cuentas", ylab = "Frecuencia")
num_cuentas = round(rnorm(100,mean = 50, sd = 10))
#12
density(num_cuentas)
#12
densidad = density(num_cuentas)
# Añadimos los datos con riudo en el eje X
rug(jitter(x))
#11
boxplot(num_cuentas, main = "Frecuencia de cuentas por yacimiento",
xlab = "Número de cuentas", ylab = "Densidad")
# Calculamos la densidad
densidad <- density(num_cuentas)
density(num_cuentas)
lines(dx, lwd = 2, col = "red")
lines(densidad, lwd = 2, col = "red")
plot(dx, lwd = 2, col = "red",
main = "Densidad")
plot(densidad, lwd = 2, col = "red",
main = "Densidad")
hist(num_cuentas, freq = FALSE, main = "Densidad de cuentas por yacimiento",
ylab = "Densidad")
plot(densidad, lwd = 2, col = "red",
main = "Densidad")
rug(jitter(x))
rug(jitter(num_cuentas))
plot(densidad, lwd = 2, col = "red",
main = "Densidad")
hist(num_cuentas, freq = FALSE, main = "Densidad de cuentas por yacimiento",
ylab = "Densidad")
#12
par(mfrow = c(1, 2))
par(mfrow = c(1, 2))
hist(num_cuentas, freq = FALSE, main = "Densidad de cuentas por yacimiento",
ylab = "Densidad")
densidad <- density(num_cuentas)
lines(densidad, lwd = 2, col = "red")
plot(densidad, lwd = 2, col = "red",
main = "Densidad")
rug(jitter(num_cuentas))
par(mfrow = c(1, 2))
hist(num_cuentas, freq = FALSE, main = "Densidad de cuentas por yacimiento",
ylab = "Densidad")
densidad <- density(num_cuentas)
lines(densidad, lwd = 2, col = "khaki1")
plot(densidad, lwd = 2, col = "khaki1",
main = "Densidad")
rug(jitter(num_cuentas))
rug(jitter(num_cuentas))
par(mfrow = c(1, 2))
hist(num_cuentas, freq = FALSE, main = "Densidad de cuentas por yacimiento",
ylab = "Densidad")
densidad <- density(num_cuentas)
lines(densidad, lwd = 2, col = "blue1")
plot(densidad, lwd = 2, col = "blue",
main = "Densidad")
rug(jitter(num_cuentas))
hist(num_cuentas, freq = FALSE, main = "Densidad de cuentas por yacimiento",
ylab = "Densidad")
densidad <- density(num_cuentas)
lines(densidad, lwd = 2, col = "blue1")
plot(densidad, lwd = 2, col = "blue",
main = "Densidad")
rug(jitter(num_cuentas))
densidad <- density(num_cuentas)
lines(densidad, lwd = 2, col = "blue1")
plot(densidad, lwd = 2, col = "blue",
main = "Densidad")
#13
barplot(num_cuentas, main = "Cuentas por yacimientos",
col = "khaki1")
grafico_barras_materiales = barplot(tabla_Materiales,
horiz = TRUE,
main = "Frecuencia de materiales",
xlab = "Tipos de materiales",
ylab = "Frecuencia (%)",
col = "khaki1")
spear = read_excel("C:/spearheads.xlsx")
nuevo_dir = "C:/Users/alber/Documents/Practica_spearheads"
setwd(nuevo_dir)
spear = read_excel("C:/spearheads.xlsx")
grafico_barras_materiales = barplot(tabla_Materiales,
horiz = TRUE,
main = "Frecuencia de materiales",
xlab = "Tipos de materiales",
ylab = "Frecuencia (%)",
col = "khaki1")
names(spear)[names(spear) == "Mat"] = "Materiales"
spear = read_excel("C:/spearheads.xlsx")
library(readxl)
spear = read_excel("C:/spearheads.xlsx")
spear = as.data.frame(spear)
names(spear)[names(spear) == "Mat"] = "Materiales"
#Con el operador "names(spear)" nos referimos a los nombres del data frame, y con el operador == y = "Materiales" estamos diciendo que todos aquellos vectores en los que "Mat" sea TRUE vamos a darle el nombre de "Materiales"
names(spear)[names(spear) == "Con"] = "Contexto"
names(spear)[names(spear) == "Cond"] = "Conservación"
names(spear)[names(spear) == "Loo"] = "Loop"
names(spear)[names(spear) == "Peg"] = "Remache"
names(spear)[names(spear) == "Date"] = "Fecha"
names(spear)[names(spear) == "Maxle"] = "Longitud_max"
names(spear)[names(spear) == "Socle"] = "Longitud_encaje"
names(spear)[names(spear) == "Maxwi"] = "Ancho_max"
names(spear)[names(spear) == "Upsoc"] = "Ancho_encaje"
names(spear)[names(spear) == "Maxwit"] = "Ancho_max_encaje"
names(spear)[names(spear) == "Weight"] = "Peso"
View(spear)
spear$Contexto = factor(spear$Contexto, levels = c('1','2','3'), labels = c("s/c", "Habitacional", "Funerario"))
#Con el operador "factor()" convertimos variables de
spear$Conservación = factor(spear$Conservación, levels = c('1','2','3','4'), labels = c("Excelente","Bueno","Regular","Malo"))
spear$Remache = factor(spear$Remache, levels = c('1','2'), labels = c("Sí","No"))
spear$Materiales = factor(spear$Materiales, levels = c('1','2'), labels = c("Bronce","Hierro"))
View(spear)
tabla_Materiales = table(spear$Materiales)
#Creamos el objeto "tabla_Materiales" como una tabla de frecuencia, señalando la variable "Materiales" con el operador "$" dentro de nuestro data frame
tabla_Contextos = table(spear$Contexto)
tabla_Conservacion = table(spear$Conservación)
tabla_Materiales_Contexto = xtabs(~ Materiales + Contexto, data = spear)
print(tabla_Materiales_Contexto)
#Para una tabla cruzada de dos variables creamos el objeto y le damos el valor con la función "xtabs()"; añadimos un operador de suma de las dos variables, y el operador "~" precedido del valor que queremos que se cruce con otro; y finalmente, para indicar la procedencia de los datos utilizamos el operador "data ="
tabla_Materiales_Conservacion = xtabs(~ Materiales + Conservación, data = spear)
tabla_porcentaje_Materiales = prop.table(tabla_Materiales) *100
#Con la función "prop.table()" lo que hacemos es dividir cada valor por el total de variables del vector, y lo multiplicamos por 100 para obtener el porcentaje de esa tabla de frecuencia.
tabla_porcentaje_Contexto = prop.table(tabla_Contextos) *100
tabla_porcentaje_Conservacion = prop.table(tabla_Conservacion) *100
porcentajes_M_Cx = prop.table(tabla_Materiales_Contexto, margin = 1) *100
porcentajes_M_Cons = prop.table(tabla_Materiales_Conservacion, margin = 1) *100
grafico_barras_conservacion = barplot(tabla_Conservacion,
main = "Frecuencia de Conservación",
xlab = "Grado de Conservación",
ylab = "Frecuencia (%)",
col = "khaki1")
grafico_barras_contextos = barplot(tabla_Contextos,
main = "Frecuencia de Contextos",
xlab = "Contextos",
ylab = "Frecuencia (%)",
col = "khaki1")
grafico_barras_materiales = barplot(tabla_Materiales,
horiz = TRUE,
main = "Frecuencia de materiales",
xlab = "Tipos de materiales",
ylab = "Frecuencia (%)",
col = "khaki1")
grafico_barras_materiales = barplot(tabla_Materiales,
horiz = TRUE,
main = "Frecuencia de materiales",
xlab = "Frecuencia (%)",
ylab = "Tipos de materiales",
col = "khaki1")
tabla_Remaches = table(spear$Remache)
grafico_barras_remache = barplot(tabla_Remaches,
horiz = TRUE,
main = "Frecuencia de remaches",
xlab = "Frecuencia (%)",
ylab = "Remaches",
col = "khaki1")
#10
#Aquí lo que hacemos es crear un gráfico de barras en el que, con la función "beside = TRUE= estamos agrupando los valores de la tabla cruzada "Materiales sobre Conservación"
#Con esto obtenemos la frecuencia (%) de grados de conservación por cada tipo de material.
barplot(tabla_Materiales_Conservacion,
beside = TRUE,
main = "Frecuencia de grado de conservación por tipo de material",
xlab = "Grado de conservación",
ylab = "Frecuencia (%)",
col = c("blue", "green", "red", "khaki"),
legend = rownames(tabla_Materiales_Conservacion))
#10
#Aquí lo que hacemos es crear un gráfico de barras en el que, con la función "beside = TRUE= estamos agrupando los valores de la tabla cruzada "Materiales sobre Conservación"
#Con esto obtenemos la frecuencia (%) de grados de conservación por cada tipo de material.
barplot(tabla_Materiales_Conservacion,
beside = TRUE,
main = "Frecuencia de grado de conservación por tipo de material",
xlab = "Grado de conservación",
ylab = "Frecuencia (%)",
col = c("blue","khaki"),
legend = rownames(tabla_Materiales_Conservacion))
#10
#Aquí lo que hacemos es crear un gráfico de barras en el que, con la función "beside = TRUE= estamos agrupando los valores de la tabla cruzada "Materiales sobre Conservación"
#Con esto obtenemos la frecuencia (%) de grados de conservación por cada tipo de material.
barplot(tabla_Materiales_Conservacion,
beside = TRUE,
main = "Frecuencia de grado de conservación por tipo de material",
xlab = "Grado de conservación",
ylab = "Frecuencia (%)",
col = c("darkblue","khaki"),
legend = rownames(tabla_Materiales_Conservacion))
grafico_barras_conservacion
grafico_barras_conservacion = barplot(tabla_Conservacion,
main = "Frecuencia de Conservación",
xlab = "Grado de Conservación",
ylab = "Frecuencia (%)",
col = "khaki1")
grafico_barras_contextos = barplot(tabla_Contextos,
main = "Frecuencia de Contextos",
xlab = "Contextos",
ylab = "Frecuencia (%)",
col = "khaki1")
porcentajes_M_Cx = prop.table(tabla_Materiales_Contexto, margin = 1) *100
porcentajes_M_Cons = prop.table(tabla_Materiales_Conservacion, margin = 1) *100
porcentajes_M_Cons
porcentajes_M_Cx
tabla_porcentaje_Materiales
#11
pie(tabla_Conservacion,
main = "Distribución de los grados de conservación",
col = "khaki"(length(tabla_Conservacion)))
#11
pie(tabla_Conservacion,
main = "Distribución de los grados de conservación",
col = "rainbow"(length(tabla_Conservacion)))
#11
pie(tabla_Conservacion,
main = "Distribución de los grados de conservación",
col = c("green","darkblue","yellow","red"))
#11
#Con la función "pie()" creamos el gráfico de sectores, utilizando como referencia la tabla de frecuencia que realizamos en el ejercicio 4.
pie(tabla_Conservacion,
main = "Distribución de los grados de conservación",
col = c("green","darkblue","yellow","red"),
labels = tabla_porcentaje_Conservacion)
#11
#Con la función "pie()" creamos el gráfico de sectores, utilizando como referencia la tabla de frecuencia que realizamos en el ejercicio 4.
pie(tabla_Conservacion,
main = "Distribución de los grados de conservación",
col = c("green","darkblue","yellow","red"),
labels = paste(tabla_Conservacion), "(", (tabla_porcentaje_Conservacion), "%)")
#11
#Con la función "pie()" creamos el gráfico de sectores, utilizando como referencia la tabla de frecuencia que realizamos en el ejercicio 4.
pie(tabla_Conservacion,
main = "Distribución de los grados de conservación",
col = c("green","darkblue","yellow","red"),
labels = paste(names(tabla_Conservacion), "(", (tabla_porcentaje_Conservacion), "%)"))
#11
#Con la función "pie()" creamos el gráfico de sectores, utilizando como referencia la tabla de frecuencia que realizamos en el ejercicio 4.
pie(tabla_Conservacion,
main = "Distribución de los grados de conservación",
col = c("green","darkblue","yellow","red"),
labels = paste(names(tabla_Conservacion),"(", (tabla_porcentaje_Conservacion),"%)"))
#12
hist(spear)
#12
hist(spear$Materiales)
#12
#Primero seleccionamos únicamente las variables que son continuas, es decir, que son arbitrarias, en este caso, los valores numéricos
var_continuas = spear[sapply(spear, is.numeric)]
par(mfrow=c(ceiling(sqrt(ncol(var_continuas))), ceiling(sqrt(ncol(var_continuas)))))
for (i in 1:ncol(var_continuas)) {
hist(var_continuas[,i], main=names(var_continuas)[i], xlab="Valor", prob=TRUE)
}
par(mfrow=c(ceiling(sqrt(ncol(var_continuas))), ceiling(sqrt(ncol(var_continuas)))))
for (i in 1:ncol(var_continuas))
{
hist(var_continuas[,i], main=names(var_continuas)[i], xlab="Valor", prob=TRUE)
}
{
hist(var_continuas[,i], main=names(var_continuas)[i], xlab="Valor", prob=TRUE)
}
hist(var_continuas[,i], main=names(var_continuas)[i], xlab="Valor", prob=TRUE)
par(mfrow=c(ceiling(sqrt(ncol(var_continuas))), ceiling(sqrt(ncol(var_continuas)))))
for (i in 1:ncol(var_continuas)) {
hist(var_continuas[,i], main=names(var_continuas)[i], xlab="Valor", prob=TRUE)
}
for (i in 1:ncol(variables_continuas)) {
hist(variables_continuas[,i], main=names(variables_continuas)[i], xlab="Valor", prob=TRUE)
}
for (i in 1:ncol(variables_continuas)) {
hist(var_continuas[,i], main=names(var_continuas)[i], xlab="Valor", prob=TRUE)
}
for (i in 1:ncol(var_continuas)) {
hist(var_continuas[,i], main=names(var_continuas)[i], xlab="Valor", prob=TRUE)
}
windows(width = 10, height = 10)
par(mfrow=c(ceiling(sqrt(ncol(var_continuas))), ceiling(sqrt(ncol(var_continuas)))))
for (i in 1:ncol(var_continuas)) {
hist(var_continuas[,i], main=names(var_continuas)[i], xlab="Valor", prob=TRUE)
}
#12
#Primero seleccionamos únicamente las variables que son continuas, es decir, que son arbitrarias, en este caso, los valores numéricos
var_continuas = spear[sapply(spear, is.numeric)]
par(mfrow=c(ceiling(sqrt(ncol(var_continuas))), ceiling(sqrt(ncol(var_continuas)))))
for (i in 1:ncol(var_continuas)) {
hist(var_continuas[,i], main=names(var_continuas)[i], xlab="Valor", prob=TRUE)
}
# Ajustar el tamaño de la ventana gráfica
windows(width = 10, height = 10)  # Ajusta el tamaño según tus necesidades
for (i in 1:ncol(var_continuas)) {
if (i %% 4 == 1) {
dev.new()
}
hist(variables_continuas[,i], main=names(variables_continuas)[i], xlab="Valor", prob=TRUE)
}
# Crear el histograma de probabilidad para cada variable continua
for (i in 1:ncol(var_continuas)) {
if (i %% 4 == 1) {
dev.new()
}
# Crear el histograma de probabilidad
hist(var_continuas[,i], main=names(var_continuas)[i], xlab="Valor", prob=TRUE)
}
# Ajustar el tamaño de la ventana gráfica
windows(width = 10, height = 6)  # Ajusta el tamaño según tus necesidades
# Crear el histograma de probabilidad para cada variable continua
for (i in 1:ncol(var_continuas)) {
# Crear el histograma de probabilidad
if (i == 1) {
hist(var_continuas[,i], main=names(var_continuas)[i], xlab="Valor", prob=TRUE)
} else {
hist(var_continuas[,i], main=names(var_continuas)[i], xlab="Valor", prob=TRUE, add = TRUE)
}
}
# Ajustar el tamaño de la ventana gráfica
windows(width = 10, height = 10)  # Ajusta el tamaño según tus necesidades
for (i in 1:ncol(var_continuas)) {
# Crear el histograma de probabilidad
if (i == 1) {
hist(var_continuas[,i], main=names(var_continuas)[i], xlab="Valor", prob=TRUE)
} else {
hist(var_continuas[,i], main=names(var_continuas)[i], xlab="Valor", prob=TRUE, add = TRUE)
}
}
# Ajustar el tamaño de la ventana gráfica
windows(width = 20, height = 20)  # Ajusta el tamaño según tus necesidades
for (i in 1:ncol(var_continuas)) {
# Crear el histograma de probabilidad
if (i == 1) {
hist(var_continuas[,i], main=names(var_continuas)[i], xlab="Valor", prob=TRUE)
} else {
hist(var_continuas[,i], main=names(var_continuas)[i], xlab="Valor", prob=TRUE, add = TRUE)
}
}
# Crear el histograma de probabilidad para cada variable continua
for (i in 1:ncol(var_continuas)) {
if (i %% 4 == 1) {
dev.new()
}
# Crear el histograma de probabilidad
hist(var_continuas[,i], main=names(var_continuas)[i], xlab="Valor", prob=TRUE, add = TRUE)
}
#12
#Primero seleccionamos únicamente las variables que son continuas, es decir, que son arbitrarias, en este caso, los valores numéricos
var_continuas = spear[sapply(spear, is.numeric)]
hist(unlist(var_continuas),
main = "Histograma de Probabilidad de Variables Continuas",
xlab = "Valor",
prob = TRUE)
# Ajustar el tamaño de la ventana gráfica
windows(width = 10, height = 10)
hist(unlist(var_continuas),
main = "Histograma de Probabilidad de Variables Continuas",
xlab = "Valor",
prob = TRUE)
par(mar = c(5, 4, 4, 2) + 0.1)
hist(unlist(var_continuas),
main = "Histograma de Probabilidad de Variables Continuas",
xlab = "Valor",
prob = TRUE)
# Ajustar el tamaño de la ventana gráfica
windows(width = 20, height = 10)
hist(unlist(var_continuas),
main = "Histograma de Probabilidad de Variables Continuas",
xlab = "Valor",
prob = TRUE)
# Ajustar el tamaño de la ventana gráfica
windows(width = 20, height = 20)
hist(unlist(var_continuas),
main = "Histograma de Probabilidad de Variables Continuas",
xlab = "Valor",
prob = TRUE)
hist(unlist(var_continuas),
main = "Histograma de Probabilidad de Variables Continuas",
xlab = "Valor",
prob = TRUE)
windows(width = 20, height = 20)
hist(unlist(var_continuas),
main = "Histograma de Probabilidad de Variables Continuas",
xlab = "Valor",
prob = TRUE)
windows(width = 10, height = 10)
hist(unlist(var_continuas),
main = "Histograma de Probabilidad de Variables Continuas",
xlab = "Valor",
prob = TRUE)
hist(unlist(var_continuas),
main = "Histograma de Probabilidad de Variables Continuas",
xlab = "Valor",
prob = TRUE)
windows(width = 10, height = 10)
hist(unlist(var_continuas),
main = "Histograma de Probabilidad de Variables Continuas",
xlab = "Valor",
prob = TRUE)
histograma_probabilidad = hist(unlist(var_continuas),
main = "Histograma de Probabilidad de Variables Continuas",
xlab = "Valor",
prob = TRUE)
windows(width = 10, height = 10)
histograma_probabilidad = hist(unlist(var_continuas),
main = "Histograma de Probabilidad de Variables Continuas",
xlab = "Valor",
prob = TRUE)
